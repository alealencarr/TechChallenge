// <auto-generated />
using System;
using Infraestrutura;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestrutura.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250601020450_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entidades.Agregados.AgregadoPedido.IngredienteLanche", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Adicional")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdIngrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IngredientesLanche");
                });

            modelBuilder.Entity("Domain.Entidades.Agregados.AgregadoPedido.ItemPedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.ToTable("ItensPedido");
                });

            modelBuilder.Entity("Domain.Entidades.Agregados.AgregadoPedido.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusPedido")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Domain.Entidades.Agregados.AgregadoProduto.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Domain.Entidades.Agregados.AgregadoProduto.ProdutoImagem", b =>
                {
                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Blob")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProdutoId", "Id");

                    b.ToTable("ProdutoImagens");
                });

            modelBuilder.Entity("Domain.Entidades.Agregados.AgregadoProduto.ProdutoIngrediente", b =>
                {
                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("ProdutoId", "IngredienteId");

                    b.HasIndex("IngredienteId");

                    b.ToTable("ProdutoIngredientes");
                });

            modelBuilder.Entity("Domain.Entidades.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Lanche"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Acompanhamento"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Bebida"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Sobremesa"
                        });
                });

            modelBuilder.Entity("Domain.Entidades.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Domain.Entidades.Ingrediente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Ingredientes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000011"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Hambúrguer Angus 200g",
                            Preco = 10.00m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000012"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Frango Grelhado",
                            Preco = 7.50m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000013"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Carne Desfiada BBQ",
                            Preco = 9.00m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000014"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Queijo Muçarela",
                            Preco = 1.50m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000015"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Queijo Gorgonzola",
                            Preco = 2.00m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000016"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Ovo Frito",
                            Preco = 1.50m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000017"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Rúcula Fresca",
                            Preco = 0.80m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000018"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Jalapeño",
                            Preco = 1.00m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000019"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Barbecue Defumado",
                            Preco = 1.00m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000020"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Mostarda e Mel",
                            Preco = 1.00m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000021"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Pimenta Chipotle",
                            Preco = 1.20m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000022"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Cebola Crispy",
                            Preco = 1.20m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000023"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Tomate Confit",
                            Preco = 1.50m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000024"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Molho Trufado",
                            Preco = 2.50m
                        });
                });

            modelBuilder.Entity("IngredienteLancheItemPedido", b =>
                {
                    b.Property<Guid>("IngredientesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItensPedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngredientesId", "ItensPedidoId");

                    b.HasIndex("ItensPedidoId");

                    b.ToTable("IngredienteLancheItemPedido");
                });

            modelBuilder.Entity("Domain.Entidades.Agregados.AgregadoPedido.ItemPedido", b =>
                {
                    b.HasOne("Domain.Entidades.Agregados.AgregadoPedido.Pedido", "Pedido")
                        .WithMany("Itens")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Domain.Entidades.Agregados.AgregadoPedido.Pedido", b =>
                {
                    b.HasOne("Domain.Entidades.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Domain.Entidades.Agregados.AgregadoProduto.Produto", b =>
                {
                    b.HasOne("Domain.Entidades.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Domain.Entidades.Agregados.AgregadoProduto.ProdutoImagem", b =>
                {
                    b.HasOne("Domain.Entidades.Agregados.AgregadoProduto.Produto", "Produto")
                        .WithMany("ProdutoImagens")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Domain.Entidades.Agregados.AgregadoProduto.ProdutoIngrediente", b =>
                {
                    b.HasOne("Domain.Entidades.Ingrediente", "Ingrediente")
                        .WithMany("ProdutoIngredientes")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Agregados.AgregadoProduto.Produto", "Produto")
                        .WithMany("ProdutoIngredientes")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingrediente");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Domain.Entidades.Cliente", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.CpfVo", "CPF", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("nvarchar(11)")
                                .HasColumnName("Cpf");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("CPF");
                });

            modelBuilder.Entity("IngredienteLancheItemPedido", b =>
                {
                    b.HasOne("Domain.Entidades.Agregados.AgregadoPedido.IngredienteLanche", null)
                        .WithMany()
                        .HasForeignKey("IngredientesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Agregados.AgregadoPedido.ItemPedido", null)
                        .WithMany()
                        .HasForeignKey("ItensPedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entidades.Agregados.AgregadoPedido.Pedido", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("Domain.Entidades.Agregados.AgregadoProduto.Produto", b =>
                {
                    b.Navigation("ProdutoImagens");

                    b.Navigation("ProdutoIngredientes");
                });

            modelBuilder.Entity("Domain.Entidades.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Domain.Entidades.Cliente", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Domain.Entidades.Ingrediente", b =>
                {
                    b.Navigation("ProdutoIngredientes");
                });
#pragma warning restore 612, 618
        }
    }
}
