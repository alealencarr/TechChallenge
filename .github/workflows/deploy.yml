# .github/workflows/deploy.yml

name: Build and Deploy API to AKS

# Gatilho: Roda sempre que houver um push ou merge na branch 'main'
on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    # 1. Baixa o código do seu repositório
    - name: 'Checkout'
      uses: actions/checkout@v4

    # 2. Autentica no Azure usando o segredo que criamos
    - name: 'Azure Login'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

  # --- SEÇÃO ALTERADA ABAIXO ---

    # 3. Autentica o Docker no seu Azure Container Registry
    - name: 'Docker Login to ACR'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
        password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}

    # 4. Constrói e Tagueia a imagem Docker
    # Agora estamos usando o comando 'docker build' padrão
    - name: 'Build and tag Docker image'
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/tchungry-api:${{ github.sha }} .

    # 5. Envia a imagem para o ACR
    # Agora estamos usando o comando 'docker push' padrão
    - name: 'Push Docker image to ACR'
      run: |
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/tchungry-api:${{ github.sha }}

    # --- FIM DA SEÇÃO ALTERADA ---

    # 6. Conecta a ferramenta 'kubectl' ao nosso cluster AKS na nuvem
    - name: 'Set AKS context'
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP_NAME }}
        cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

    # 7. Faz o deploy da aplicação no AKS
    - name: 'Deploy to AKS'
      run: |
        kubectl create secret generic api-secrets \
          --from-literal=ConnectionStrings__Default='${{ secrets.DB_CONNECTION_STRING }}' \
          --from-literal=AZURE_STORAGE_CONNECTION_STRING='${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}' \
          --dry-run=client -o yaml | kubectl apply -f -

        find ./k8s -type f -name "*.yaml" -exec sed -i 's|__ACR_LOGIN_SERVER__|${{ secrets.ACR_LOGIN_SERVER }}|g' {} +
        find ./k8s -type f -name "*.yaml" -exec sed -i 's|__IMAGE_TAG__|${{ github.sha }}|g' {} +
        
        kubectl apply -f k8s/
